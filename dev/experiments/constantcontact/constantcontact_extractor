# -*- coding: utf-8 -*-
"""mailchimp_extractor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XJOE05RPhcpR-a7aV2qbaE809DfRyH8h
"""

# import the necessary libraries
import requests
import pandas as pd
import json

"""###**Extract data using API**"""

# set the url
url = 'https://api.constantcontact.com/v2/emailmarketing/campaigns/1140300363415?api_key=xxx'

# set the authorization token. replace 'your_token' with the actual token.
headers = {'Authorization': 'Bearer xxx'}

# send the get request
response = requests.get(url, headers=headers)

# raise an exception in case the get request was unsuccessful
response.raise_for_status()

# load the response as a json
data = response.json()

# convert the json data into a pandas dataframe
df = pd.json_normalize(data)

# save the dataframe to a csv file
df.to_csv('email_compaign5.0.csv', index=False)

# confirm the operation
print("Data exported to email_compaign5.0.csv")
print(df.head())

from google.colab import files

files.download('email_compaign5.0.csv')

"""###**contact data**"""

# define the URL and authorization
url = 'https://api.constantcontact.com/v2/contacts?status=ALL&limit=500&api_key=xxx'
headers = {
    'Authorization': 'Bearer xxx'
}

# Send the HTTP request
response = requests.get(url, headers=headers)

# Load the JSON data from the response
data = response.json()

# Now, process this data similarly as before
# Extract the 'results' list which contains the data
data = data['results']

# Normalize JSON to flat table
df = pd.json_normalize(data)

# Address, Lists, and Email_addresses contain further nested data. We'll only take the first element for simplicity.
df['address'] = df['addresses'].apply(lambda x: x[0] if x else {})
df['list'] = df['lists'].apply(lambda x: x[0] if x else {})
df['email_address'] = df['email_addresses'].apply(lambda x: x[0] if x else {})

# Normalize nested columns and join with original data
df = df.join(pd.json_normalize(df['address']).add_prefix('address.')).drop(columns=['addresses', 'address'])
df = df.join(pd.json_normalize(df['list']).add_prefix('list.')).drop(columns=['lists', 'list'])
df = df.join(pd.json_normalize(df['email_address']).add_prefix('email_address.')).drop(columns=['email_addresses', 'email_address'])

# Now, df is a DataFrame containing the data in tabular form
print(df)

num_records, num_fields = df.shape
print(f'There are {num_records} records and {num_fields} fields.')

from google.colab import files

# Save DataFrame to a CSV file
df.to_csv('contact.csv', index=False)

# Download the file to your local machine
files.download('contact.csv')

"""###**email compaign data**"""

# Define the URL and the headers
url = 'https://api.constantcontact.com/v2/emailmarketing/campaigns/1140300363415/tracking/sends?limit=500&api_key=xxx'
headers = {
    'Authorization': 'Bearer xxx'
}

# Make the GET request
response = requests.get(url, headers=headers)

# Load the response to a JSON
data = response.json()

# Extract the 'results' data to a pandas DataFrame
df = pd.json_normalize(data['results'])

# Print the DataFrame to see the result
print(df)

# Count the records
num_records = len(df)
print(f'There are {num_records} records.')

# Save DataFrame to a CSV file
df.to_csv('send_activities.csv', index=False)

# Download the file to your local machine
files.download('send_activities.csv')